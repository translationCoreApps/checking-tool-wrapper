/* eslint-disable no-nested-ternary */
import React from 'react';
import PropTypes from 'prop-types';
import isEqual from 'deep-equal';
import { VerseCheck } from 'tc-ui-toolkit';
import { optimizeSelections, normalizeString } from '../helpers/selectionHelpers';

class VerseCheckWrapper extends React.Component {
  constructor(props) {//âœ…
    super(props);

    let { verseText } = this.props;//âœ…
    const mode = props.selectionsReducer &&
      props.selectionsReducer.selections &&
      props.selectionsReducer.selections.length > 0 || verseText.length === 0 ?
      'default' : props.selectionsReducer.nothingToSelect ? 'default' : 'select';//âœ…
    const { nothingToSelect } = props.selectionsReducer;//âœ…

    this.state = { //âœ…
      mode: mode,
      comment: undefined,
      commentChanged: false,
      verseText: undefined,
      verseChanged: false,
      selections: [],
      nothingToSelect,
      tags: [],
      dialogModalVisibility: false,
      goToNextOrPrevious: null,
    };
  }//âœ…

  componentDidCatch(error, info) {
    console.error(error);
    console.warn(info);
  }

  componentWillMount() {//âœ…
    let selections = [...this.props.selectionsReducer.selections];
    this.setState({ selections });
  }//âœ…

  componentWillReceiveProps(nextProps) {//âœ…ðŸ‘€
    const { contextId } = this.props || {};//âœ…
    const nextContextId = nextProps;//âœ…

    if (contextId !== nextContextId) {//âœ…
      const selections = Array.from(nextProps.selectionsReducer.selections);//âœ…
      const nothingToSelect = nextProps.selectionsReducer.nothingToSelect;//âœ…

      const { chapter, verse } = nextContextId.reference || {};//âœ…
      const targetBible = nextProps.targetBible || {};//âœ…
      let verseText = targetBible && targetBible[chapter] ? targetBible[chapter][verse] : '';//âœ…

      if (Array.isArray(verseText)) {//âœ…
        verseText = verseText[0];//âœ…
      }//âœ…
      // normalize whitespace in case selection has contiguous whitespace _this isn't captured
      verseText = normalizeString(verseText);//âœ…
      const mode = nextProps.selectionsReducer.selections.length > 0 || verseText.length === 0 ?
        'default' : nextProps.selectionsReducer.nothingToSelect ? 'default' : 'select';

      this.setState({
        mode: mode,
        comments: undefined,
        verseText: undefined,
        selections,
        nothingToSelect,
        tags: [],
        lastContextId: undefined,
      });
    }
  }

  handleGoToNext = () => {//âœ…
    this.props.actions.goToNext();
  }//âœ…

  handleGoToPrevious = () => {//âœ…
    this.props.actions.goToPrevious();
  }//âœ…

  handleOpenDialog = (goToNextOrPrevious) => {//âœ…
    this.setState({ goToNextOrPrevious });
    this.setState({ dialogModalVisibility: true });
  }//âœ…

  handleCloseDialog = () => {//âœ…
    this.setState({ dialogModalVisibility: false });
  }//âœ…

  skipToNext = () => {//âœ…
    this.setState({ dialogModalVisibility: false });
    this.props.actions.goToNext();
  }//âœ…

  skipToPrevious = () => {//âœ…
    this.setState({ dialogModalVisibility: false });
    this.props.actions.goToPrevious();
  }//âœ…

  changeSelectionsInLocalState = (selections) => {//âœ…
    const { nothingToSelect } = this.props.selectionsReducer;

    if (selections.length > 0) {
      this.setState({ nothingToSelect: false });
    } else {
      this.setState({ nothingToSelect });
    }
    this.setState({ selections });
  }//âœ…

  changeMode = (mode) => {//âœ…
    this.setState({
      mode: mode,
      selections: this.props.selectionsReducer.selections,
    });
  }//âœ…

  handleComment = (e) => {//âœ…
    const comment = e.target.value;

    this.setState({ comment: comment });
  }//âœ…

  handleCheckComment = (e) => {//âœ…
    const newcomment = e.target.value || '';
    const oldcomment = this.props.commentsReducer.text || '';

    this.setState({ commentChanged: newcomment !== oldcomment });
  }//âœ…

  cancelComment = () => {//âœ…
    this.setState({
      mode: 'default',
      selections: this.props.selectionsReducer.selections,
      comment: undefined,
      commentChanged: false,
    });
  }//âœ…

  saveComment = () => {//âœ…
    this.props.actions.addComment(this.state.comment);
    this.setState({
      mode: 'default',
      selections: this.props.selectionsReducer.selections,
      comment: undefined,
      commentChanged: false,
    });
  }//âœ…

  handleTagsCheckbox = (tag) => {//âœ…
    let newState = this.state;

    if (newState.tags === undefined) {
      newState.tags = [];
    }

    if (!newState.tags.includes(tag)) {
      newState.tags.push(tag);
    } else {
      newState.tags = newState.tags.filter(_tag => _tag !== tag);
    }
    this.setState(newState);
  }//âœ…

  handleEditVerse = (e) => {//âœ…
    const verseText = e.target.value;

    this.setState({ verseText: verseText });
  }//âœ…

  handleCheckVerse = (e) => {//âœ…
    const { chapter, verse } = this.props.contextId.reference;
    const newverse = e.target.value || '';
    const oldverse = this.props.targetBible[chapter][verse] || '';

    if (newverse === oldverse) {
      this.setState({
        verseChanged: false,
        tags: [],
      });
    } else {
      this.setState({ verseChanged: true });
    }
  }//âœ…

  cancelEditVerse = () => {//âœ…
    this.setState({
      mode: 'default',
      selections: this.props.selectionsReducer.selections,
      verseText: undefined,
      verseChanged: false,
      tags: [],
    });
  }//âœ…

  saveEditVerse = () => {//âœ…
    const {
      actions, contextId, targetBible,
    } = this.props;
    const { chapter, verse } = contextId.reference;
    let before = targetBible[chapter][verse];

    const save = () => {
      actions.editTargetVerse(chapter, verse, before, this.state.verseText, this.state.tags);
      this.setState({
        mode: 'default',
        selections: this.props.selectionsReducer.selections,
        verseText: undefined,
        verseChanged: false,
        tags: [],
      });
    };

    if (this.state.verseText) {
      save();
    } else {
      // alert the user if the text is blank
      let message = 'You are saving a blank verse. Please confirm.';

      actions.openOptionDialog(message, (option) => {
        if (option !== 'Cancel') {
          save();
        }
        actions.closeAlertDialog();
      }, 'Save Blank Verse', 'Cancel');
    }
  }//âœ…

  validateSelections = (verseText) => {//âœ…
    this.props.actions.validateSelections(verseText);
  }//âœ…

  toggleReminder = () => {//âœ…
    this.props.actions.toggleReminder();
  }//âœ…

  openAlertDialog = (message) => {//âœ…
    this.props.actions.openAlertDialog(message);
  }//âœ…

  selectModalTab = (tab, section, vis) => {//âœ…
    this.props.actions.selectModalTab(tab, section, vis);
  }//âœ…

  cancelSelection = () => {//âœ…
    const { nothingToSelect } = this.props.selectionsReducer;
    this.setState({ nothingToSelect });
    this.changeSelectionsInLocalState(this.props.selectionsReducer.selections);
    this.changeMode('default');
  }//âœ…

  clearSelection = () => {//âœ…
    this.setState({ selections: [] });
  }//âœ…

  saveSelection = () => {//âœ…
    let { verseText } = this.props;
    // optimize the selections to address potential issues and save
    let selections = optimizeSelections(verseText, this.state.selections);
    this.props.actions.changeSelections(selections, this.state.nothingToSelect);
    this.changeMode('default');
  }//âœ…

  handleSkip = (e) => {//âœ…
    e.preventDefault();

    if (this.state.goToNextOrPrevious == 'next') {
      this.skipToNext();
    } else if (this.state.goToNextOrPrevious == 'previous') {
      this.skipToPrevious();
    }
  }//âœ…

  onInvalidQuote = (contextId, selectedGL) => {// !
    // to prevent multiple alerts on current selection
    if (!isEqual(contextId, this.state.lastContextId)) {
      this.props.actions.onInvalidCheck(contextId, selectedGL, true);
      this.setState({ lastContextId: contextId });
    }
  }// !

  toggleNothingToSelect = (nothingToSelect) => {//âœ…
    this.setState({ nothingToSelect });
  }//âœ…

  render() {
    const { //âœ…
      translate,
      manifest,
      selectionsReducer: {
        selections,
        nothingToSelect,
      },
      contextId,
      targetBible,
      verseText,
      unfilteredVerseText,
      commentsReducer: { text: commentText },
      remindersReducer: { enabled: bookmarkEnabled },
      maximumSelections,
      isVerseEdited,
      isVerseInvalidated,
      alignedGLText,
    } = this.props;//âœ…

    return (
      <VerseCheck
        translate={translate}
        mode={this.state.mode}
        tags={this.state.tags}
        targetBible={targetBible}
        verseText={verseText}
        unfilteredVerseText={unfilteredVerseText}
        contextId={contextId}
        selections={selections}
        isVerseEdited={isVerseEdited}
        commentText={commentText}
        alignedGLText={alignedGLText}
        nothingToSelect={nothingToSelect}
        bookmarkEnabled={bookmarkEnabled}
        maximumSelections={maximumSelections}
        isVerseInvalidated={isVerseInvalidated}
        bookDetails={manifest.project}
        targetLanguageDetails={manifest.target_language}
        newSelections={this.state.selections}
        isVerseChanged={this.state.verseChanged}
        isCommentChanged={this.state.commentChanged}
        localNothingToSelect={this.state.nothingToSelect}
        dialogModalVisibility={this.state.dialogModalVisibility}
        handleSkip={this.handleSkip}
        handleGoToNext={this.handleGoToNext}
        handleGoToPrevious={this.handleGoToPrevious}
        handleOpenDialog={this.handleOpenDialog}
        handleCloseDialog={this.handleCloseDialog}
        openAlertDialog={this.openAlertDialog}
        toggleReminder={this.toggleReminder}
        changeMode={this.changeMode}
        cancelEditVerse={this.cancelEditVerse}
        saveEditVerse={this.saveEditVerse}
        handleComment={this.handleComment}
        cancelComment={this.cancelComment}
        saveComment={this.saveComment}
        saveSelection={this.saveSelection}
        cancelSelection={this.cancelSelection}
        clearSelection={this.clearSelection}
        handleEditVerse={this.handleEditVerse}
        checkIfVerseChanged={this.handleCheckVerse}
        checkIfCommentChanged={this.handleCheckComment}
        validateSelections={this.validateSelections}
        handleTagsCheckbox={this.handleTagsCheckbox}
        toggleNothingToSelect={this.toggleNothingToSelect}
        changeSelectionsInLocalState={this.changeSelectionsInLocalState}
      />
    );
  }
}

VerseCheckWrapper.propTypes = {
  translate: PropTypes.func.isRequired,
  remindersReducer: PropTypes.object,
  commentsReducer: PropTypes.object,
  targetBible: PropTypes.object.isRequired,
  contextId: PropTypes.object.isRequired,
  verseText: PropTypes.string.isRequired,
  unfilteredVerseText: PropTypes.string.isRequired,
  manifest: PropTypes.object.isRequired,
  maximumSelections: PropTypes.number.isRequired,
  isVerseEdited: PropTypes.bool.isRequired,
  isVerseInvalidated: PropTypes.bool.isRequired,
  alignedGLText: PropTypes.string.isRequired,
  selectionsReducer: PropTypes.shape({
    selections: PropTypes.array,
    nothingToSelect: PropTypes.bool,
  }),
  actions: PropTypes.shape({
    changeSelections: PropTypes.func.isRequired,
    goToNext: PropTypes.func.isRequired,
    goToPrevious: PropTypes.func.isRequired,
    onInvalidCheck: PropTypes.func.isRequired,
    selectModalTab: PropTypes.func.isRequired,
    openAlertDialog: PropTypes.func.isRequired,
    addComment: PropTypes.func.isRequired,
    editTargetVerse: PropTypes.func.isRequired,
    openOptionDialog: PropTypes.func.isRequired,
    closeAlertDialog: PropTypes.func.isRequired,
    validateSelections: PropTypes.func.isRequired,
    toggleReminder: PropTypes.func.isRequired,
  }),
};

/*TODO: Remove the following reducers
  removed groupsDataReducer
  removed loginReducer

  Changed addComment to not need username as argument
    ?  actions.addComment(newComment, loginReducer.userdata.username);
  Removed username as parameter from toggleReminder action
    this.props.actions.toggleReminder(this.props.loginReducer.userdata.username);
    Same for actions.editTargetVerse
        this.props.actions.toggleReminder(this.props.loginReducer.userdata.username);
            this.props.actions.changeSelections(selections, username, this.state.nothingToSelect);

  Removed the bibles prop and only pass targetBible since it is the only one needed.

  verseText is now calculated in the highest level component and passed down so we dont have to process getting it multiple times

  Reworked alignedGLText
      const { toolsSelectedGLs } = manifest;

    const alignedGLText = checkAreaHelpers.getAlignedGLText(
      toolsSelectedGLs,
      contextId,
      bibles,
      currentToolName,
      translate,
      this.onInvalidQuote
    );
*/

export default VerseCheckWrapper;
